#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
File name: generateHtml.py
Author: CrazyHsu @ crazyhsu9627@gmail.com
Created on: 2021-05-25 16:20:33
Last modified: 2021-05-25 16:20:33
'''

from yattag import Doc, indent
from collections import Counter
import pandas as pd
import numpy as np
import os, argparse, glob
from commonFuncs import validateFile

# parser = argparse.ArgumentParser()
# parser.add_argument("-o", dest="outDir", type=str, default="MODAS_output",
#                     help="The default output dir of html reports")
# parser.add_argument("-m", dest="modasOut", type=str, default="modas.csv",
#                     help="The MODAS output file for generating html reports")
# parser.add_argument("-f", dest="func", type=str, default="description.txt",
#                     help="The function description for annotating genes found by MODAS")
# parser.add_argument("-n", dest="snpNumber", type=int, default=2000000,
#                     help="The number of total SNPs")
# parser.add_argument("-qq", dest="qqplot", type=str, default="",
#                     help="The directory which store the qqplot pictures generated by MODAS")
# parser.add_argument("-box", dest="boxplot", type=str, default="",
#                     help="The directory which store the boxplot pictures generated by MODAS")
# parser.add_argument("-manhattan", dest="manhattan", type=str, default="",
#                     help="The directory which store the boxplot pictures generated by MODAS")
# args = parser.parse_args()


################# Classes #################
class AllQtlStatistics():
    def __init__(self):
        self.totalSNPs = 0
        self.qtlDetected = 0
        self.medianQtlLen = 0
        self.longestQtlLen = 0
        self.shortestQtlLen = 0
        self.totalAnnoGenes = 0
        # self.totalTargetGenes = 0
        # self.totalEnrichTargetGenes = 0
        # self.aveEnrichGenes = 0

    def getQtlLengthInfo(self, qtlLenSeries):
        self.medianQtlLen = np.median(qtlLenSeries)
        self.longestQtlLen = np.max(qtlLenSeries)
        self.shortestQtlLen = np.min(qtlLenSeries)

    def getTotalAnnoGenes(self, qtlAllGenesSeries):
        self.totalAnnoGenes = len(self.mergeSeries2List(qtlAllGenesSeries))

    # def getTotalTargetGenes(self, qtlAllMetaGenesSeries):
    #     self.totalTargetGenes = len(self.mergeSeries2List(qtlAllMetaGenesSeries))

    # def getEnrichTargetGenes(self, myDataFrame):
    #     filteredSeries = myDataFrame.loc[myDataFrame.qtl_p_value <= 0.05, "qtl_meta_gene"]
    #     self.totalEnrichTargetGenes = len(self.mergeSeries2List(filteredSeries))

    def getInit(self, tableData):
        self.qtlDetected = len(tableData)
        self.getQtlLengthInfo(tableData.qtl_length)
        self.getTotalAnnoGenes(tableData.qtl_all_gene)
        # self.getTotalTargetGenes(tableData.qtl_meta_gene)
        # self.getEnrichTargetGenes(tableData)

    def mergeSeries2List(self, mySeries, sep=";"):
        return set().union(*mySeries.apply(lambda x: str(x).split(sep)).to_list())


class AllTraitStatistics():
    def __init__(self):
        self.totalTraits = 0
        self.filteredTraits = 0
        self.clusteredTraits = 0
        self.unclusteredTraits = 0

    def getFilteredTraits(self, traitSeries):
        self.filteredTraits = len(self.mergeSeries2List(traitSeries, sep=","))
        self.totalTraits = len(self.mergeSeries2List(traitSeries, sep=","))

    def getClusteredTraits(self, labelSeries):
        counter = Counter(labelSeries.to_list())
        clustered = [i for i in counter if counter[i] != 1]
        unclustered = [i for i in counter if counter[i] == 1]
        self.clusteredTraits = len(clustered)
        self.unclusteredTraits = len(unclustered)

    # def getUnclusterTraits(self, labelSeries):
    #     self.clusteredTraits = len(set(labelSeries.to_list()))

    def getInit(self, tableData):
        self.getFilteredTraits(tableData.phe_name)
        self.getClusteredTraits(tableData.phe_name)
        # self.getUnclusterTraits(tableData.phe_name)

    def mergeSeries2List(self, mySeries, sep=";"):
        return set().union(*mySeries.apply(lambda x: str(x).split(sep)).to_list())


class SingleQtlStatistics():
    def __init__(self, myRow, rowIndex):
        self.qtlName = "QTL{}_chr{}-{}-{}".format(rowIndex, myRow.CHR, myRow.qtl_start, myRow.qtl_end)
        self.qtlPosition = "{}:{}-{}".format(myRow.CHR, myRow.qtl_start, myRow.qtl_end)
        self.peakSNP = "Rs_{}, Chr{}".format(myRow.SNP, myRow.SNP)
        self.traitNames = myRow.phe_name.split(",")
        self.totalGenesInQtl = str(myRow.qtl_all_gene).split(";")
        # self.targetGenesInQtl = str(myRow.qtl_meta_gene).split(";")
        # self.enrichTargetGenes = 0
        self.pvalue = myRow.P


################# Functions ##################
def resolveDir(dirName):
    if not os.path.exists(dirName):
        os.makedirs(dirName)
    os.chdir(dirName)


def getGeneFunc(myGeneFuncFile, sep=","):
    gene2func = pd.read_csv(myGeneFuncFile, sep=sep)
    tmpDict = gene2func.to_dict("index")
    geneFuncDict = {}
    for i in tmpDict:
        geneFuncDict[tmpDict[i]["geneId"]] = tmpDict[i]
    return geneFuncDict


def getAllQtlSummary(allQtlStatistics, doc=None, tag=None, text=None, line=None):
    with tag("div", id="qtlSummary"):
        line("h1", "Summary of QTLs detected by local GWAS", style="text-align: center;")
        circosFile = "/home/xufeng/xufeng/Projects/MODAS/xufeng1/assets/img/circos.png"
        with tag("div", style="text-align: center;margin-top: 50px;"):
            doc.stag("img", klass="img-fluid", src=circosFile, alt="circos")
        with tag("div", style="margin-top: 100px;"):
            with tag("div"):
                line("h2", "QTL summarization criteria")
                line("p", "The cutoffs in generating and filtering QTLs")
            with tag("div"):
                line("h2", "QTL statistics table")
                with tag("div", klass="table-responsive"):
                    with tag("table", klass="table"):
                        with tag("thead"):
                            with tag("tr", klass="table-success"):
                                line("th", "Categories", style="width: 50%")
                                line("th", "Statistics value", style="width: 50%")
                        with tag("tbody"):
                            with tag("tr"):
                                line("td", "Genotype file")
                                line("td", "XXXXXX")
                            with tag("tr"):
                                line("td", "Number of SNPs for local GWAS")
                                line("td", str(allQtlStatistics.totalSNPs))
                            with tag("tr"):
                                line("td", "Number of detected QTLs")
                                line("td", str(allQtlStatistics.qtlDetected))
                            with tag("tr"):
                                line("td", "Median QTL length")
                                line("td", str(allQtlStatistics.medianQtlLen))
                            with tag("tr"):
                                line("td", "Longest QTL length")
                                line("td", str(allQtlStatistics.longestQtlLen))
                            with tag("tr"):
                                line("td", "Shortest QTL length")
                                line("td", str(allQtlStatistics.shortestQtlLen))
                            with tag("tr"):
                                line("td", "Total genes in the QTLs")
                                line("td", str(allQtlStatistics.totalAnnoGenes))
                            # with tag("tr"):
                            #     line("td", "Total target genes in the QTLs")
                            #     line("td", str(allQtlStatistics.totalTargetGenes))
                            # with tag("tr"):
                            #     line("td", "Total enrichment of target genes")
                            #     line("td", str(allQtlStatistics.totalEnrichTargetGenes))
                            # with tag("tr"):
                            #     line("td", "Average enrichment of target genes")
                            #     line("td", str(allQtlStatistics.aveEnrichGenes))


def getAllTraitSummary(allTraitStatistics, doc=None, tag=None, text=None, line=None):
    # doc, tag, text, line = Doc().ttl()
    with tag("div", id="traitSummary"):
        line("h1", "Summary of omics traits detected by local GWAS", style="text-align: center;")
        # heatmapFile = "/home/xufeng/xufeng/Projects/MODAS/xufeng1/assets/img/heatmap.png"
        # with tag("div", style="text-align: center;margin-top: 50px;"):
        #     doc.stag("img", klass="img-fluid", src=heatmapFile, alt="heatmap")
        with tag("div", style="margin-top: 100px;"):
            with tag("div"):
                line("h2", "Omics trait filtration criteria")
                line("p", "Parameters and pipelines in filtering traits")
            with tag("div"):
                line("h2", "Trait statistics table")
                with tag("div", klass="table-responsive"):
                    with tag("table", klass="table"):
                        with tag("thead"):
                            with tag("tr", klass="table-success"):
                                line("th", "Categories", style="width: 50%")
                                line("th", "Statistics value", style="width: 50%")
                        with tag("tbody"):
                            with tag("tr"):
                                line("td", "Omics trait type")
                                line("td", "Metabolome")
                            with tag("tr"):
                                line("td", "Total number of traits")
                                line("td", str(allTraitStatistics.totalTraits))
                            with tag("tr"):
                                line("td", "Filtered number of traits")
                                line("td", str(allTraitStatistics.filteredTraits))
                            with tag("tr"):
                                line("td", "Number of clustered traits")
                                line("td", str(allTraitStatistics.clusteredTraits))
                            # with tag("tr"):
                            #     line("td", "Number of modules of clustered traits")
                            #     line("td", "Cell 2")
                            with tag("tr"):
                                line("td", "Number of unclustered traits")
                                line("td", str(allTraitStatistics.unclusteredTraits))
    # return doc.getvalue()


def getSingleQtlInfo(singleQtl, index, geneFuncDict, doc=None, tag=None, text=None, line=None):
    with tag("div", klass="container"):
        with tag("div", klass="row"):
            with tag("div", klass="col"):
                line("h1", "Summary in " + singleQtl.qtlName, style="text-align: center;")
                with tag("div", style="margin-top: 100px;"):
                    with tag("div"):
                        line("h2", "QTL summarization criteria for whole -genome GWAS")
                        line("p", "Parameters and pipeline for filtering traits")
                    with tag("div"):
                        line("h2", "QTL statistics table")
                        with tag("div", klass="table-responsive"):
                            with tag("table", klass="table"):
                                with tag("thead"):
                                    with tag("tr", klass="table-success"):
                                        line("th", "QTL", style="width: 50%")
                                        line("th", "Statistics", style="width: 50%")
                                with tag("tbody"):
                                    with tag("tr"):
                                        line("td", "QTL position")
                                        line("td", str(singleQtl.qtlPosition))
                                    with tag("tr"):
                                        line("td", "Peak SNP ID and position")
                                        line("td", str(singleQtl.peakSNP))
                                    with tag("tr"):
                                        line("td", "Number of total genes in the QTL")
                                        line("td", str(len(singleQtl.totalGenesInQtl)))
                                    with tag("tr"):
                                        line("td", "Enrichment significance vs background")
                                        line("td", str(singleQtl.pvalue))
                    with tag("div"):
                        line("h2", "List of total genes in the QTL")
                        with tag("div", klass="table-responsive"):
                            with tag("table", klass="table"):
                                with tag("thead"):
                                    with tag("tr", klass="table-success"):
                                        line("th", "Gene ID", style="width: 25%")
                                        line("th", "Alias ID", style="width: 25%")
                                        line("th", "Position", style="width: 25%")
                                        line("th", "Function", style="width: 25%")
                                with tag("tbody"):
                                    for qtl in singleQtl.totalGenesInQtl:
                                        if qtl == "nan":
                                            continue
                                        with tag("tr"):
                                            line("td", str(geneFuncDict[qtl]["geneId"].strip()))
                                            line("td", str(geneFuncDict[qtl]["aliasId"].strip()))
                                            line("td", str(geneFuncDict[qtl]["position"].strip()))
                                            line("td", str(geneFuncDict[qtl]["function"].strip()))

def getListItem(data, qtlName=None, traitName=None, doc=None, tag=None, text=None, line=None, mainPage=False):
    for index, row in data.iterrows():
        qtlItem = SingleQtlStatistics(row, index)
        if qtlName and qtlName == qtlItem.qtlName:
            expand = "true"
            faPlusOrMinus = "fa-minus"
            myClass = "list-unstyled collapse nav nav-pills show"
            active = " active"
        else:
            expand = "false"
            faPlusOrMinus = "fa-plus"
            myClass = "list-unstyled collapse nav nav-pills"
            active = ""
        if mainPage:
            relativeDir = os.path.join("", qtlItem.qtlName)
        else:
            if qtlName == qtlItem.qtlName:
                relativeDir = ""
            else:
                relativeDir = os.path.join("../", qtlItem.qtlName)
        with tag("li"):
            with tag("div", klass="qtlItem" + active):
                with tag("a", ("href", os.path.join(relativeDir, qtlItem.qtlName + ".html")), klass="qtlLink"):
                    text(qtlItem.qtlName)
                with tag("a", ("href", "#" + qtlItem.qtlName), ("data-toggle", "collapse"), ("aria-expanded", expand)):
                    line("i", "", klass="fa " + faPlusOrMinus)
            with tag("ul", ("class", myClass), ("id", qtlItem.qtlName), ("aria-expanded", expand)):
                for i in qtlItem.traitNames:
                    with tag("li"):
                        href = os.path.join(relativeDir, i + ".html")
                        if traitName and traitName == i:
                            with tag("a", ("href", href), ("class", "active"), ("aria-selected", "true")):
                                line("i", "", klass="fa fa-link")
                                text(" " + i)
                        else:
                            with tag("a", ("href", href), ("aria-selected", "false")):
                                line("i", "", klass="fa fa-link")
                                text(" " + i)


def generateMainPage(data, allQtlStatistics, allTraitStatistics):
    doc, tag, text, line = Doc().ttl()
    doc.asis('<!DOCTYPE html>')
    with tag('html'):
        with tag('head'):
            doc.stag('meta', charset='utf-8')
            doc.stag('meta', name='viewport', content='width=device-width, initial-scale=1.0, shrink-to-fit=no')
            line('title', 'MODAS main page')
            doc.stag('link', rel='stylesheet', href='assets/bootstrap/css/bootstrap.min.css')
            doc.stag('link', rel='stylesheet', href='assets/fonts/font-awesome.min.css')
            doc.stag('link', rel='stylesheet', href="assets/css/modas.css")
            # doc.stag('link', rel='stylesheet', href="assets/css/styles.css")

        with tag("body"):
            with tag("div", id="sidebar-test"):
                with tag("div", klass="sidebar-header"):
                    with tag("h2"):
                        line("a", "MODAS", href="mainPage.html", klass="modas")
                with tag("ul"):
                    getListItem(data, doc=doc, tag=tag, text=text, line=line, mainPage=True)

            with tag("div", klass="content"):
                with tag("div", klass="container"):
                    with tag("div", klass="row"):
                        with tag("div", klass="col"):
                            getAllQtlSummary(allQtlStatistics, doc=doc, tag=tag, text=text, line=line)
                            doc.stag("hr", style="margin-bottom: 50px;margin-top: 50px;")
                            getAllTraitSummary(allTraitStatistics, doc=doc, tag=tag, text=text, line=line)
            line("script", "", src="assets/js/jquery.min.js")
            line("script", "", src="assets/bootstrap/js/bootstrap.min.js")
            line("script", "", src="assets/js/modas.js")

    mainPageOut = open("mainPage.html", "w")
    res = indent(doc.getvalue(), indentation="    ")
    mainPageOut.write(res)
    # print(res, file=mainPageOut)
    mainPageOut.close()


def generateSingleQtlPage(data, geneFuncDict):
    for index, row in data.iterrows():
        qtlItem = SingleQtlStatistics(row, index)
        if not os.path.exists(qtlItem.qtlName):
            os.makedirs(qtlItem.qtlName)
        out = open(os.path.join(qtlItem.qtlName, qtlItem.qtlName + ".html"), "w")

        doc, tag, text, line = Doc().ttl()
        doc.asis('<!DOCTYPE html>')
        with tag('html'):
            with tag('head'):
                doc.stag('meta', charset='utf-8')
                doc.stag('meta', name='viewport', content='width=device-width, initial-scale=1.0, shrink-to-fit=no')
                line('title', 'Summary information in QTL ' + qtlItem.qtlName)
                doc.stag('link', rel='stylesheet', href='../assets/bootstrap/css/bootstrap.min.css')
                doc.stag('link', rel='stylesheet', href='../assets/fonts/font-awesome.min.css')
                doc.stag('link', rel='stylesheet', href="../assets/css/modas.css")
                # doc.stag('link', rel='stylesheet', href="assets/css/styles.css")
            with tag("body"):
                with tag("div", id="sidebar-test"):
                    with tag("div", klass="sidebar-header"):
                        with tag("h2"):
                            line("a", "MODAS", href="../mainPage.html", klass="modas")
                    with tag("ul"):
                        getListItem(data, qtlName=qtlItem.qtlName, doc=doc, tag=tag, text=text, line=line)

                with tag("div", klass="content"):
                    getSingleQtlInfo(qtlItem, index, geneFuncDict, doc=doc, tag=tag, text=text, line=line)

                line("script", "", src="../assets/js/jquery.min.js")
                line("script", "", src="../assets/bootstrap/js/bootstrap.min.js")
                line("script", "", src="../assets/js/modas.js")

                customJs = '''
                    <script>
                        var offestFromTop = %d * 45 + 68;
                        $('#sidebar-test').scrollTop(offestFromTop);

                        function clickItem(event) {
                            var target = event.currentTarget;
                            $(target).parent().removeClass(".active").addClass(".active");

                            var index = $("div.qtlItem").index($(this).parent());
                            var offestFromTop = index * 45 + 68;
                            $('#sidebar-test').scrollTop(offestFromTop);
                        }
                        if ($("div.qtlItem .qtlLink")) {
                            var qtlLink = $("div.qtlItem .qtlLink");
                            for (var i = 0; i < qtlLink.length; i++) {
                                var item = qtlLink[i];
                                item.onclick = clickItem;
                            }
                        }
                    </script>
                ''' % (index)
                doc.asis(customJs)

        res = indent(doc.getvalue(), indentation="    ")
        out.write(res)
        # print(res, file=out)
        out.close()


def generateSingleTraitPage(data, manhattanDir, qqDir, boxplotDir):
    for index, row in data.iterrows():
        qtlItem = SingleQtlStatistics(row, index)
        for traitName in qtlItem.traitNames:
            # getListItem(qtlItem)
            out = open(os.path.join(qtlItem.qtlName, traitName + ".html"), "w")
            doc, tag, text, line = Doc().ttl()
            doc.asis('<!DOCTYPE html>')
            with tag('html'):
                with tag('head'):
                    doc.stag('meta', charset='utf-8')
                    doc.stag('meta', name='viewport', content='width=device-width, initial-scale=1.0, shrink-to-fit=no')
                    line('title', 'Detailed information in trait ' + traitName)
                    doc.stag('link', rel='stylesheet', href='../assets/bootstrap/css/bootstrap.min.css')
                    doc.stag('link', rel='stylesheet', href='../assets/fonts/font-awesome.min.css')
                    doc.stag('link', rel='stylesheet', href="../assets/css/modas.css")
                    # doc.stag('link', rel='stylesheet', href="assets/css/styles.css")
                with tag("body"):
                    with tag("div", id="sidebar-test"):
                        with tag("div", klass="sidebar-header"):
                            with tag("h2"):
                                line("a", "MODAS", href="../mainPage.html", klass="modas")
                        with tag("ul"):
                            getListItem(data, qtlItem.qtlName, traitName, doc=doc, tag=tag, text=text, line=line)

                    manhattanFile = os.path.join(manhattanDir, "gemma_means_{}.jpg".format(traitName))
                    boxplotFile = glob.glob(os.path.join(boxplotDir, "{}_*.jpg".format(traitName)))[0]
                    qqplotFile = os.path.join(qqDir, "QQplot.gemma_means_{}.jpg".format(traitName))
                    with tag("div", klass="content"):
                        with tag("div", klass="container"):
                            with tag("div", klass="row"):
                                with tag("div", klass="col"):
                                    line("h1", "Details in " + traitName, style="text-align: center;")
                                    doc.stag("img", klass="img-fluid", src=manhattanFile)
                                    with tag("div", klass="row"):
                                        with tag("div", klass="col-6"):
                                            doc.stag("img", klass="img-fluid", src=qqplotFile)
                                        with tag("div", klass="col-6"):
                                            doc.stag("img", klass="img-fluid", src=boxplotFile)

                    line("script", "", src="../assets/js/jquery.min.js")
                    line("script", "", src="../assets/bootstrap/js/bootstrap.min.js")
                    line("script", "", src="../assets/js/modas.js")

                    customJs = '''
                        <script>
                            var offestFromTop = %d * 45 + 68;
                            $('#sidebar').scrollTop(offestFromTop);

                            function clickItem(event) {
                                var target = event.currentTarget;
                                $(target).parent().removeClass(".active").addClass(".active");

                                var index = $("div.qtlItem").index($(this).parent());
                                var offestFromTop = index * 45 + 68;
                                $('#sidebar-test').scrollTop(offestFromTop);
                            }
                            if ($("div.qtlItem .qtlLink")) {
                                var qtlLink = $("div.qtlItem .qtlLink");
                                for (var i = 0; i < qtlLink.length; i++) {
                                    var item = qtlLink[i];
                                    item.onclick = clickItem;
                                }
                            }
                        </script>
                    ''' % (index)
                    doc.asis(customJs)

            res = indent(doc.getvalue(), indentation="    ")
            out.write(res)
            # print(res, file=out)
            out.close()

def geneStrucBlock(isoformStrucFile, gene, doc=None, line=None):
    if validateFile(isoformStrucFile):
        line("h1", "The isoform structure in " + gene, style="text-align: center;")
        doc.stag("img", klass="img-fluid", src=isoformStrucFile)

def alleleAsBlock(alleleAsFile, doc=None, tag=None, line=None):
    if validateFile(alleleAsFile):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=alleleAsFile)

def paTailLenAsBlock(paTailLenAsFile, doc=None, tag=None, line=None):
    if validateFile(paTailLenAsFile):
        with tag("div", klass="col-6"):
            line("h1", "AS-related poly(A) tail length differential", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=paTailLenAsFile)

def diffAsBlock(diffAsList, doc=None, tag=None, line=None):
    diffAsPlot = diffAsList[1]
    if validateFile(diffAsPlot):
        with tag("div", klass="col-6"):
            line("h1", "Differential alternative splicing pattern distribution", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=diffAsPlot)

def goEnrichmentBlock(goEnrichList, doc=None, tag=None, line=None):
    goEnrichPlot = goEnrichList[1]
    if validateFile(goEnrichPlot):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=goEnrichPlot)

'''
    reportDict = {
        "mergedSample": {"basicStatistics": {"diffAS": [text, pdf], "goEnrich": [text, pdf]}, 
                         "genes": {"gene1": gene1AllSampleMergedStruc, ...}},
        sample1: {"basicStatistics": {"readsCorrection": [text, pdf], 
                                      "reportReadsContentEval": {"GC_of_raw_flnc": [text, pdf],
                                                                 "GC_across_raw_flnc": [text, pdf],
                                                                 "LengthDistribution": [pdf1, pdf2]},
                                      "asPattern": {"asAnno": [text, pdf], "asSpliceSite": [text, pdf]},
                                      "isoformRank": [pdf]}, 
                  "genes": {"gene1": {"isoformStruc": pdf, "allelicAS": pdf, "paTailAS": pdf},
                            ...}},
        ...
    }
'''
def readsCorrBlock(readsCorrectionList, doc=None, tag=None, line=None):
    readsCorrPlot = readsCorrectionList[1]
    if validateFile(readsCorrPlot):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=readsCorrPlot)

def readsContentBlock(readsContentDict, doc=None, tag=None, line=None):
    gcInFlncPlot = readsContentDict["GC_of_raw_flnc"][1]
    gcAcrossFlncPlot = readsContentDict["GC_across_raw_flnc"][1]
    if validateFile(gcInFlncPlot):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=gcInFlncPlot)

def asPatternBlock(asPatternDict, doc=None, tag=None, line=None):
    annotationPlot = asPatternDict["asAnno"][1]
    spliceSitePlot = asPatternDict["asSpliceSite"][1]
    if validateFile(annotationPlot):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=annotationPlot)

def isoformRankBlock(isoformRankList, doc=None, tag=None, line=None):
    annotatedPlot = isoformRankList[0]
    novelPlot = isoformRankList[1]
    if validateFile(annotatedPlot):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=annotatedPlot)

def generateMainPage1(reportDict):
    doc, tag, text, line = Doc().ttl()
    doc.asis('<!DOCTYPE html>')
    with tag('html'):
        with tag('head'):
            doc.stag('meta', charset='utf-8')
            doc.stag('meta', name='viewport', content='width=device-width, initial-scale=1.0, shrink-to-fit=no')
            line('title', 'iFLAS main page')
            doc.stag('link', rel='stylesheet', href='assets/bootstrap/css/bootstrap.min.css')
            doc.stag('link', rel='stylesheet', href='assets/fonts/font-awesome.min.css')
            doc.stag('link', rel='stylesheet', href="assets/css/iflas.css")

        with tag("body"):
            with tag("div", id="sidebar"):
                with tag("div", klass="sidebar-header"):
                    with tag("h2"):
                        line("a", "iFLAS", href="iflas_report.html", klass="iflas")
                with tag("ul"):
                    getListItem(reportDict, doc=doc, tag=tag, text=text, line=line, mainPage=True)

            with tag("div", klass="content"):
                with tag("div", klass="container"):
                    with tag("div", klass="row"):
                        with tag("div", klass="col"):
                            line("h1", "This is the main page", style="text-align: center;")
                            # getAllQtlSummary(allQtlStatistics, doc=doc, tag=tag, text=text, line=line)
                            # doc.stag("hr", style="margin-bottom: 50px;margin-top: 50px;")
                            # getAllTraitSummary(allTraitStatistics, doc=doc, tag=tag, text=text, line=line)
            line("script", "", src="assets/js/jquery.min.js")
            line("script", "", src="assets/bootstrap/js/bootstrap.min.js")
            line("script", "", src="assets/js/iflas.js")

    mainPageOut = open("iflas_report.html", "w")
    res = indent(doc.getvalue(), indentation="    ")
    mainPageOut.write(res)
    mainPageOut.close()

def generateStatisticsPage(reportDict):
    for index, sample in enumerate(reportDict.keys):
        if not os.path.exists(sample):
            os.makedirs(sample)
        out = open(os.path.join(sample, sample + ".html"), "w")

        doc, tag, text, line = Doc().ttl()
        doc.asis('<!DOCTYPE html>')
        with tag('html'):
            with tag('head'):
                doc.stag('meta', charset='utf-8')
                doc.stag('meta', name='viewport', content='width=device-width, initial-scale=1.0, shrink-to-fit=no')
                line('title', 'Summary information in sample ' + sample)
                doc.stag('link', rel='stylesheet', href='../assets/bootstrap/css/bootstrap.min.css')
                doc.stag('link', rel='stylesheet', href='../assets/fonts/font-awesome.min.css')
                doc.stag('link', rel='stylesheet', href="../assets/css/iflas.css")
            with tag("body"):
                with tag("div", id="sidebar"):
                    with tag("div", klass="sidebar-header"):
                        with tag("h2"):
                            line("a", "iFLAS", href="../iflas_report.html", klass="iflas")
                    with tag("ul"):
                        getSideBar(reportDict, sample=sample, doc=doc, tag=tag, text=text, line=line)

                with tag("div", klass="content"):
                    with tag("div", klass="container"):
                        with tag("div", klass="row"):
                            with tag("div", klass="col"):
                                basicStatisticsDict = reportDict["mergedSample"]["basicStatistics"]
                                if sample == "mergedSample":
                                    line("h1", "Summary information in all sample", style="text-align: center;")
                                    diffAsBlock(basicStatisticsDict["diffAS"])
                                    goEnrichmentBlock(basicStatisticsDict["goEnrich"])
                                else:
                                    line("h1", "Summary information in " + sample, style="text-align: center;")
                                    readsCorrBlock(basicStatisticsDict["readsCorrection"])
                                    readsContentBlock(basicStatisticsDict["reportReadsContentEval"])
                                    asPatternBlock(basicStatisticsDict["asPattern"])
                                    isoformRankBlock(basicStatisticsDict["isoformRank"])
                '''
                    reportDict = {
                        "mergedSample": {"basicStatistics": {"diffAS": [text, pdf], "goEnrich": [text, pdf]}, 
                                         "genes": {"gene1": gene1AllSampleMergedStruc, ...}},
                        sample1: {"basicStatistics": {"readsCorrection": [text, pdf], 
                                                      "reportReadsContentEval": {"GC_of_raw_flnc": [text, pdf],
                                                                                 "GC_across_raw_flnc": [text, pdf],
                                                                                 "LengthDistribution": [pdf1, pdf2]},
                                                      "asPattern": {"asAnno": [text, pdf], "asSpliceSite": [text, pdf]},
                                                      "isoformRank": [pdf]}, 
                                  "genes": {"gene1": {"isoformStruc": pdf, "allelicAS": pdf, "paTailAS": pdf},
                                            ...}},
                        ...
                    }
                '''
                line("script", "", src="../assets/js/jquery.min.js")
                line("script", "", src="../assets/bootstrap/js/bootstrap.min.js")
                line("script", "", src="../assets/js/iflas.js")

                customJs = '''
                    <script>
                        var offestFromTop = %d * 45 + 68;
                        $('#sidebar-test').scrollTop(offestFromTop);

                        function clickItem(event) {
                            var target = event.currentTarget;
                            $(target).parent().removeClass(".active").addClass(".active");

                            var index = $("div.qtlItem").index($(this).parent());
                            var offestFromTop = index * 45 + 68;
                            $('#sidebar-test').scrollTop(offestFromTop);
                        }
                        if ($("div.qtlItem .qtlLink")) {
                            var qtlLink = $("div.qtlItem .qtlLink");
                            for (var i = 0; i < qtlLink.length; i++) {
                                var item = qtlLink[i];
                                item.onclick = clickItem;
                            }
                        }
                    </script>
                ''' % (index)
                doc.asis(customJs)

        res = indent(doc.getvalue(), indentation="    ")
        out.write(res)
        out.close()

def getSideBar(reportDict, sample=None, gene=None, doc=None, tag=None, text=None, line=None, mainPage=False):
    for tmpSample in reportDict:
        if sample and sample == tmpSample:
            expand = "true"
            faPlusOrMinus = "fa-minus"
            myClass = "list-unstyled collapse nav nav-pills show"
            active = " active"
        else:
            expand = "false"
            faPlusOrMinus = "fa-plus"
            myClass = "list-unstyled collapse nav nav-pills"
            active = ""
        if mainPage:
            relativeDir = os.path.join("", tmpSample)
        else:
            if sample == tmpSample:
                relativeDir = ""
            else:
                relativeDir = os.path.join("../", tmpSample)
        with tag("li"):
            with tag("div", klass="sample" + active):
                with tag("a", ("href", os.path.join(relativeDir, gene + ".html")), klass="geneLink"):
                    text(gene)
                with tag("a", ("href", "#" + gene), ("data-toggle", "collapse"), ("aria-expanded", expand)):
                    line("i", "", klass="fa " + faPlusOrMinus)
            with tag("ul", ("class", myClass), ("id", sample), ("aria-expanded", expand)):
                for i in reportDict[tmpSample]["genes"]:
                    with tag("li"):
                        href = os.path.join(relativeDir, i + ".html")
                        if gene and gene == i:
                            with tag("a", ("href", href), ("class", "active"), ("aria-selected", "true")):
                                line("i", "", klass="fa fa-link")
                                text(" " + i)
                        else:
                            with tag("a", ("href", href), ("aria-selected", "false")):
                                line("i", "", klass="fa fa-link")
                                text(" " + i)

def generateGenePage(reportDict):
    for index, sample in enumerate(reportDict.keys()):
        geneDict = reportDict[sample]["gene"]
        geneList = sorted(geneDict.keys())
        for gene in geneList:
            out = open(os.path.join(sample, gene + ".html"), "w")
            doc, tag, text, line = Doc().ttl()
            doc.asis('<!DOCTYPE html>')
            with tag('html'):
                with tag('head'):
                    doc.stag('meta', charset='utf-8')
                    doc.stag('meta', name='viewport', content='width=device-width, initial-scale=1.0, shrink-to-fit=no')
                    line('title', 'Detailed information in gene ' + gene)
                    doc.stag('link', rel='stylesheet', href='../assets/bootstrap/css/bootstrap.min.css')
                    doc.stag('link', rel='stylesheet', href='../assets/fonts/font-awesome.min.css')
                    doc.stag('link', rel='stylesheet', href="../assets/css/iflas.css")
                with tag("body"):
                    with tag("div", id="sidebar"):
                        with tag("div", klass="sidebar-header"):
                            with tag("h2"):
                                line("a", "iFLAS", href="../iflas_report.html", klass="iflas")
                        with tag("ul"):
                            getSideBar(reportDict, sample, gene, doc=doc, tag=tag, text=text, line=line)

                    # isoformStrucFile = geneDict[gene]["isoformStruc"]
                    # alleleAsFile = geneDict[gene]["allelicAS"]
                    # paTailLenAsFile = geneDict[gene]["paTailAS"]
                    with tag("div", klass="content"):
                        with tag("div", klass="container"):
                            with tag("div", klass="row"):
                                with tag("div", klass="col"):
                                    geneStrucBlock(geneDict[gene]["isoformStruc"], gene, doc=doc, line=line)
                                    # if validateFile(isoformStrucFile):
                                    #     line("h1", "The isoform structure in " + gene, style="text-align: center;")
                                    #     doc.stag("img", klass="img-fluid", src=isoformStrucFile)
                                    if sample != "mergedSample":
                                        with tag("div", klass="row"):
                                            alleleAsBlock(geneDict[gene]["allelicAS"], doc=doc, tag=tag, line=line)
                                            paTailLenAsBlock(geneDict[gene]["paTailAS"], doc=doc, tag=tag, line=line)
                                            # if validateFile(alleleAsFile):
                                            #     with tag("div", klass="col-6"):
                                            #         line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
                                            #         doc.stag("img", klass="img-fluid", src=alleleAsFile)
                                            # if validateFile(paTailLenAsFile):
                                            #     with tag("div", klass="col-6"):
                                            #         line("h1", "AS-related poly(A) tail length differential", style="text-align: center;")
                                            #         doc.stag("img", klass="img-fluid", src=paTailLenAsFile)

                    line("script", "", src="../assets/js/jquery.min.js")
                    line("script", "", src="../assets/bootstrap/js/bootstrap.min.js")
                    line("script", "", src="../assets/js/iflas.js")

                    customJs = '''
                                    <script>
                                        var offestFromTop = %d * 45 + 68;
                                        $('#sidebar-test').scrollTop(offestFromTop);
    
                                        function clickItem(event) {
                                            var target = event.currentTarget;
                                            $(target).parent().removeClass(".active").addClass(".active");
    
                                            var index = $("div.qtlItem").index($(this).parent());
                                            var offestFromTop = index * 45 + 68;
                                            $('#sidebar-test').scrollTop(offestFromTop);
                                        }
                                        if ($("div.qtlItem .qtlLink")) {
                                            var qtlLink = $("div.qtlItem .qtlLink");
                                            for (var i = 0; i < qtlLink.length; i++) {
                                                var item = qtlLink[i];
                                                item.onclick = clickItem;
                                            }
                                        }
                                    </script>
                                ''' % (1)
                    doc.asis(customJs)

            res = indent(doc.getvalue(), indentation="    ")
            out.write(res)
            out.close()

# def

'''
    reportDict = {
        "mergedSample": {"basicStatistics": {"diffAS": [text, pdf], "goEnrich": [text, pdf]}, 
                         "genes": {"gene1": gene1AllSampleMergedStruc, ...}},
        sample1: {"basicStatistics": {"readsCorrection": [text, pdf], 
                                      "reportReadsContentEval": {"GC_of_raw_flnc": [text, pdf],
                                                                 "GC_across_raw_flnc": [text, pdf],
                                                                 "LengthDistribution": [pdf1, pdf2]},
                                      "asPattern": {"asAnno": [text, pdf], "asSpliceSite": [text, pdf]},
                                      "isoformRank": [pdf]}, 
                  "genes": {"gene1": {"isoformStruc": pdf, "allelicAS": pdf, "paTailAS": pdf},
                            ...}},
        ...
    }
'''

def generateHtml(reportDict, iflasOut):
    # manhattanDir = os.path.abspath(args.manhattan)
    # qqplotDir = os.path.abspath(args.qqplot)
    # boxplotDir = os.path.abspath(args.boxplot)

    # data = pd.read_csv(myCSV)
    # allQtlStatistics = AllQtlStatistics()
    # allQtlStatistics.getInit(data)
    # allQtlStatistics.totalSNPs = totalSNPs
    # allTraitStatistics = AllTraitStatistics()
    # allTraitStatistics.getInit(data)
    #
    # geneFuncDict = getGeneFunc(myFuncFile, "\t")

    resolveDir(iflasOut)
    generateMainPage1(reportDict)
    generateStatisticsPage(reportDict)

    generateGenePage(reportDict)


if __name__ == '__main__':
    pass
    # inputCSV = args.modasOut
    # geneFunc = args.func
    # modasOut = args.outDir
    # totalSNPs = args.snpNumber
    # # inputCSV = "/home/xufeng/xufeng/Projects/MODAS/wk_merge.test.merged.csv"
    # inputCSV = "/home/xufeng/xufeng/Projects/MODAS/result_20210319/maize_kernel_metabolite_merge.local_gwas_qtl_res.processed.csv"
    # # inputCSV = "/home/xufeng/xufeng/Projects/MODAS/result_20210319/test.csv"
    # # inputCSV = "/home/xufeng/xufeng/Projects/MODAS/test2.csv"
    # geneFunc = "/home/xufeng/xufeng/Projects/MODAS/maize_genefunc.txt"

    # generateHtml(inputCSV, geneFunc, modasOut, totalSNPs, args)
