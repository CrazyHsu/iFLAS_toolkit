#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
File name: generateHtml.py
Author: CrazyHsu @ crazyhsu9627@gmail.com
Created on: 2021-05-25 16:20:33
Last modified: 2021-05-25 16:20:33
'''

from yattag import Doc, indent
import fitz
from collections import Counter
import pandas as pd
import numpy as np
import os, argparse, glob
from commonFuncs import validateFile, resolveDir

# parser = argparse.ArgumentParser()
# parser.add_argument("-o", dest="outDir", type=str, default="MODAS_output",
#                     help="The default output dir of html reports")
# parser.add_argument("-m", dest="modasOut", type=str, default="modas.csv",
#                     help="The MODAS output file for generating html reports")
# parser.add_argument("-f", dest="func", type=str, default="description.txt",
#                     help="The function description for annotating genes found by MODAS")
# parser.add_argument("-n", dest="snpNumber", type=int, default=2000000,
#                     help="The number of total SNPs")
# parser.add_argument("-qq", dest="qqplot", type=str, default="",
#                     help="The directory which store the qqplot pictures generated by MODAS")
# parser.add_argument("-box", dest="boxplot", type=str, default="",
#                     help="The directory which store the boxplot pictures generated by MODAS")
# parser.add_argument("-manhattan", dest="manhattan", type=str, default="",
#                     help="The directory which store the boxplot pictures generated by MODAS")
# args = parser.parse_args()

################# Functions ##################
def geneStrucBlock(isoformStrucFile, gene, doc=None, line=None):
    if validateFile(isoformStrucFile):
        line("h1", "The isoform structure in " + gene, style="text-align: center;")
        doc.stag("img", klass="img-fluid", src=isoformStrucFile)

def alleleAsBlock(alleleAsFile, doc=None, tag=None, line=None):
    if validateFile(alleleAsFile):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=alleleAsFile)

def paTailLenAsBlock(paTailLenAsFile, doc=None, tag=None, line=None):
    if validateFile(paTailLenAsFile):
        with tag("div", klass="col-6"):
            line("h1", "AS-related poly(A) tail length differential", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=paTailLenAsFile)

def diffAsBlock(diffAsList, doc=None, tag=None, line=None):
    diffAsPlot = diffAsList[1]
    if validateFile(diffAsPlot):
        with tag("div", klass="col-6"):
            line("h1", "Differential alternative splicing pattern distribution", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=diffAsPlot)

def goEnrichmentBlock(goEnrichList, doc=None, tag=None, line=None):
    goEnrichPlot = goEnrichList[1]
    if validateFile(goEnrichPlot):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=goEnrichPlot)

def readsCorrBlock(readsCorrectionList, doc=None, tag=None, line=None):
    readsCorrPlot = readsCorrectionList[1]
    if validateFile(readsCorrPlot):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=readsCorrPlot)

def readsContentBlock(readsContentDict, doc=None, tag=None, line=None):
    gcInFlncPlot = readsContentDict["GC_of_raw_flnc"][1]
    gcAcrossFlncPlot = readsContentDict["GC_across_raw_flnc"][1]
    if validateFile(gcInFlncPlot):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=gcInFlncPlot)

def asPatternBlock(asPatternDict, doc=None, tag=None, line=None):
    annotationPlot = asPatternDict["asAnno"][1]
    spliceSitePlot = asPatternDict["asSpliceSite"][1]
    if validateFile(annotationPlot):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=annotationPlot)

def isoformRankBlock(isoformRankList, doc=None, tag=None, line=None):
    annotatedPlot = isoformRankList[0]
    novelPlot = isoformRankList[1]
    if validateFile(annotatedPlot):
        with tag("div", klass="col-6"):
            line("h1", "Allele-specific Alternative splicing", style="text-align: center;")
            doc.stag("img", klass="img-fluid", src=annotatedPlot)

def generateMainPage1(reportDict):
    doc, tag, text, line = Doc().ttl()
    doc.asis('<!DOCTYPE html>')
    with tag('html'):
        with tag('head'):
            doc.stag('meta', charset='utf-8')
            doc.stag('meta', name='viewport', content='width=device-width, initial-scale=1.0, shrink-to-fit=no')
            line('title', 'iFLAS main page')
            doc.stag('link', rel='stylesheet', href='assets/bootstrap/css/bootstrap.min.css')
            doc.stag('link', rel='stylesheet', href='assets/fonts/font-awesome.min.css')
            doc.stag('link', rel='stylesheet', href="assets/css/iflas.css")

        with tag("body"):
            with tag("div", id="sidebar"):
                with tag("div", klass="sidebar-header"):
                    with tag("h2"):
                        line("a", "iFLAS", href="iflas_report.html", klass="iflas")
                with tag("ul"):
                    getSideBar(reportDict, doc=doc, tag=tag, text=text, line=line, mainPage=True)

            with tag("div", klass="content"):
                with tag("div", klass="container"):
                    with tag("div", klass="row"):
                        with tag("div", klass="col"):
                            line("h1", "This is the main page", style="text-align: center;")
            line("script", "", src="assets/js/jquery.min.js")
            line("script", "", src="assets/bootstrap/js/bootstrap.min.js")
            line("script", "", src="assets/js/iflas.js")

    mainPageOut = open("iflas_report.html", "w")
    res = indent(doc.getvalue(), indentation="    ")
    mainPageOut.write(res)
    mainPageOut.close()

def generateStatisticsPage(reportDict):
    for index, sample in enumerate(reportDict.keys):
        if not os.path.exists(sample):
            os.makedirs(sample)
        out = open(os.path.join(sample, sample + ".html"), "w")

        doc, tag, text, line = Doc().ttl()
        doc.asis('<!DOCTYPE html>')
        with tag('html'):
            with tag('head'):
                doc.stag('meta', charset='utf-8')
                doc.stag('meta', name='viewport', content='width=device-width, initial-scale=1.0, shrink-to-fit=no')
                line('title', 'Summary information in sample ' + sample)
                doc.stag('link', rel='stylesheet', href='../assets/bootstrap/css/bootstrap.min.css')
                doc.stag('link', rel='stylesheet', href='../assets/fonts/font-awesome.min.css')
                doc.stag('link', rel='stylesheet', href="../assets/css/iflas.css")
            with tag("body"):
                with tag("div", id="sidebar"):
                    with tag("div", klass="sidebar-header"):
                        with tag("h2"):
                            line("a", "iFLAS", href="../iflas_report.html", klass="iflas")
                    with tag("ul"):
                        getSideBar(reportDict, sample=sample, doc=doc, tag=tag, text=text, line=line)

                with tag("div", klass="content"):
                    with tag("div", klass="container"):
                        with tag("div", klass="row"):
                            with tag("div", klass="col"):
                                basicStatisticsDict = reportDict["mergedSample"]["basicStatistics"]
                                if sample == "mergedSample":
                                    line("h1", "Summary information in all sample", style="text-align: center;")
                                    diffAsBlock(basicStatisticsDict["diffAS"])
                                    goEnrichmentBlock(basicStatisticsDict["goEnrich"])
                                else:
                                    line("h1", "Summary information in " + sample, style="text-align: center;")
                                    readsCorrBlock(basicStatisticsDict["readsCorrection"])
                                    readsContentBlock(basicStatisticsDict["reportReadsContentEval"])
                                    asPatternBlock(basicStatisticsDict["asPattern"])
                                    isoformRankBlock(basicStatisticsDict["isoformRank"])
                line("script", "", src="../assets/js/jquery.min.js")
                line("script", "", src="../assets/bootstrap/js/bootstrap.min.js")
                line("script", "", src="../assets/js/iflas.js")

                customJs = '''
                    <script>
                        var offestFromTop = %d * 45 + 68;
                        $('#sidebar-test').scrollTop(offestFromTop);

                        function clickItem(event) {
                            var target = event.currentTarget;
                            $(target).parent().removeClass(".active").addClass(".active");

                            var index = $("div.qtlItem").index($(this).parent());
                            var offestFromTop = index * 45 + 68;
                            $('#sidebar-test').scrollTop(offestFromTop);
                        }
                        if ($("div.qtlItem .qtlLink")) {
                            var qtlLink = $("div.qtlItem .qtlLink");
                            for (var i = 0; i < qtlLink.length; i++) {
                                var item = qtlLink[i];
                                item.onclick = clickItem;
                            }
                        }
                    </script>
                ''' % (index)
                doc.asis(customJs)

        res = indent(doc.getvalue(), indentation="    ")
        out.write(res)
        out.close()

def getSideBar(reportDict, sample=None, gene=None, doc=None, tag=None, text=None, line=None, mainPage=False):
    for tmpSample in reportDict:
        if sample and sample == tmpSample:
            expand = "true"
            faPlusOrMinus = "fa-minus"
            myClass = "list-unstyled collapse nav nav-pills show"
            active = " active"
        else:
            expand = "false"
            faPlusOrMinus = "fa-plus"
            myClass = "list-unstyled collapse nav nav-pills"
            active = ""
        if mainPage:
            relativeDir = os.path.join("", tmpSample)
        else:
            if sample == tmpSample:
                relativeDir = ""
            else:
                relativeDir = os.path.join("../", tmpSample)
        with tag("li"):
            with tag("div", klass="sample" + active):
                with tag("a", ("href", os.path.join(relativeDir, gene + ".html")), klass="geneLink"):
                    text(gene)
                with tag("a", ("href", "#" + gene), ("data-toggle", "collapse"), ("aria-expanded", expand)):
                    line("i", "", klass="fa " + faPlusOrMinus)
            with tag("ul", ("class", myClass), ("id", sample), ("aria-expanded", expand)):
                for i in reportDict[tmpSample]["genes"]:
                    with tag("li"):
                        href = os.path.join(relativeDir, i + ".html")
                        if gene and gene == i:
                            with tag("a", ("href", href), ("class", "active"), ("aria-selected", "true")):
                                line("i", "", klass="fa fa-link")
                                text(" " + i)
                        else:
                            with tag("a", ("href", href), ("aria-selected", "false")):
                                line("i", "", klass="fa fa-link")
                                text(" " + i)

def generateGenePage(reportDict):
    for index, sample in enumerate(reportDict.keys()):
        geneDict = reportDict[sample]["gene"]
        geneList = sorted(geneDict.keys())
        for gene in geneList:
            out = open(os.path.join(sample, gene + ".html"), "w")
            doc, tag, text, line = Doc().ttl()
            doc.asis('<!DOCTYPE html>')
            with tag('html'):
                with tag('head'):
                    doc.stag('meta', charset='utf-8')
                    doc.stag('meta', name='viewport', content='width=device-width, initial-scale=1.0, shrink-to-fit=no')
                    line('title', 'Detailed information in gene ' + gene)
                    doc.stag('link', rel='stylesheet', href='../assets/bootstrap/css/bootstrap.min.css')
                    doc.stag('link', rel='stylesheet', href='../assets/fonts/font-awesome.min.css')
                    doc.stag('link', rel='stylesheet', href="../assets/css/iflas.css")
                with tag("body"):
                    with tag("div", id="sidebar"):
                        with tag("div", klass="sidebar-header"):
                            with tag("h2"):
                                line("a", "iFLAS", href="../iflas_report.html", klass="iflas")
                        with tag("ul"):
                            getSideBar(reportDict, sample, gene, doc=doc, tag=tag, text=text, line=line)

                    with tag("div", klass="content"):
                        with tag("div", klass="container"):
                            with tag("div", klass="row"):
                                with tag("div", klass="col"):
                                    geneStrucBlock(geneDict[gene]["isoformStruc"], gene, doc=doc, line=line)
                                    if sample != "mergedSample":
                                        with tag("div", klass="row"):
                                            alleleAsBlock(geneDict[gene]["allelicAS"], doc=doc, tag=tag, line=line)
                                            paTailLenAsBlock(geneDict[gene]["paTailAS"], doc=doc, tag=tag, line=line)

                    line("script", "", src="../assets/js/jquery.min.js")
                    line("script", "", src="../assets/bootstrap/js/bootstrap.min.js")
                    line("script", "", src="../assets/js/iflas.js")

                    customJs = '''
                                    <script>
                                        var offestFromTop = %d * 45 + 68;
                                        $('#sidebar-test').scrollTop(offestFromTop);
    
                                        function clickItem(event) {
                                            var target = event.currentTarget;
                                            $(target).parent().removeClass(".active").addClass(".active");
    
                                            var index = $("div.qtlItem").index($(this).parent());
                                            var offestFromTop = index * 45 + 68;
                                            $('#sidebar-test').scrollTop(offestFromTop);
                                        }
                                        if ($("div.qtlItem .qtlLink")) {
                                            var qtlLink = $("div.qtlItem .qtlLink");
                                            for (var i = 0; i < qtlLink.length; i++) {
                                                var item = qtlLink[i];
                                                item.onclick = clickItem;
                                            }
                                        }
                                    </script>
                                ''' % (1)
                    doc.asis(customJs)

            res = indent(doc.getvalue(), indentation="    ")
            out.write(res)
            out.close()

'''
    reportDict = {
        "mergedSample": {"basicStatistics": {"diffAS": [text, pdf], "goEnrich": [text, pdf]}, 
                         "genes": {"gene1": gene1AllSampleMergedStruc, ...}},
        sample1: {"basicStatistics": {"readsCorrection": [text, pdf], 
                                      "reportReadsContentEval": {"GC_of_raw_flnc": [text, pdf],
                                                                 "GC_across_raw_flnc": [text, pdf],
                                                                 "LengthDistribution": [pdf1, pdf2]},
                                      "asPattern": {"asAnno": [text, pdf], "asSpliceSite": [text, pdf]},
                                      "isoformRank": [pdf]}, 
                  "genes": {"gene1": {"isoformStruc": pdf, "allelicAS": pdf, "paTailAS": pdf},
                            ...}},
        ...
    }
'''
def convert(inPdf, outDir, pageIndex=0):
    outPNG = os.path.join(outDir, "{}.png".format(os.path.splitext(os.path.basename(inPdf))[0]))
    doc = fitz.open(inPdf)
    page = doc.loadPage(pageIndex)
    zoom_x = 5.0  # horizontal zoom
    zomm_y = 5.0  # vertical zoom
    mat = fitz.Matrix(zoom_x, zomm_y)  # zoom factor 2 in each dimension
    pix = page.getPixmap(matrix=mat)
    pix.writePNG(outPNG)
    return outPNG

def convertPdf2png(reportDict, iflasOut):
    for sample in reportDict:
        basicStatisticsDir = os.path.join(iflasOut, sample, "basicStatistics")
        geneDir = os.path.join(iflasOut, sample, "genes")
        resolveDir(basicStatisticsDir, chdir=False)
        resolveDir(geneDir, chdir=False)
        if sample == "mergedSample":
            diffASDir = os.path.join(basicStatisticsDir, "diffAS")
            goEnrichDir = os.path.join(basicStatisticsDir, "goEnrich")
            resolveDir(diffASDir, chdir=False)
            resolveDir(goEnrichDir, chdir=False)
            diffASPdf = reportDict[sample]["basicStatistics"]["diffAS"][1]
            goEnrichPdf = reportDict[sample]["basicStatistics"]["goEnrich"][1]
            reportDict[sample]["basicStatistics"]["diffAS"][1] = convert(diffASPdf, diffASDir, pageIndex=0)
            reportDict[sample]["basicStatistics"]["goEnrich"][1] = convert(goEnrichPdf, goEnrichDir, pageIndex=0)
        else:
            readsCorrectionDir = os.path.join(basicStatisticsDir, "readsCorrection")
            reportReadsContentEvalDir = os.path.join(basicStatisticsDir, "reportReadsContentEval")
            asPatternDir = os.path.join(basicStatisticsDir, "asPattern")
            isoformRankDir = os.path.join(basicStatisticsDir, "isoformRank")
            resolveDir(readsCorrectionDir, chdir=False)
            resolveDir(reportReadsContentEvalDir, chdir=False)
            resolveDir(asPatternDir, chdir=False)
            resolveDir(isoformRankDir, chdir=False)
            readsCorrectionPdf = reportDict[sample]["basicStatistics"]["readsCorrection"][1]
            gcFlncPdf = reportDict[sample]["basicStatistics"]["reportReadsContentEval"]["GC_of_raw_flnc"][1]
            gcAcrossFlncPdf = reportDict[sample]["basicStatistics"]["reportReadsContentEval"]["GC_across_raw_flnc"][1]
            LengthDistributionPdf1 = reportDict[sample]["basicStatistics"]["reportReadsContentEval"]["LengthDistribution"][0]
            LengthDistributionPdf2 = reportDict[sample]["basicStatistics"]["reportReadsContentEval"]["LengthDistribution"][1]
            asAnnoPdf = reportDict[sample]["basicStatistics"]["asPattern"]["asAnno"][1]
            asSpliceSitePdf = reportDict[sample]["basicStatistics"]["asPattern"]["asSpliceSite"][1]
            isoformRankPdf = reportDict[sample]["basicStatistics"]["isoformRank"][0]
            reportDict[sample]["basicStatistics"]["readsCorrection"][1] = convert(readsCorrectionPdf, readsCorrectionDir, pageIndex=0)
            reportDict[sample]["basicStatistics"]["reportReadsContentEval"]["GC_of_raw_flnc"][1] = convert(gcFlncPdf, reportReadsContentEvalDir, pageIndex=0)
            reportDict[sample]["basicStatistics"]["reportReadsContentEval"]["GC_across_raw_flnc"][1] = convert(gcAcrossFlncPdf, reportReadsContentEvalDir, pageIndex=0)
            reportDict[sample]["basicStatistics"]["reportReadsContentEval"]["LengthDistribution"][0] = convert(LengthDistributionPdf1, reportReadsContentEvalDir, pageIndex=0)
            reportDict[sample]["basicStatistics"]["reportReadsContentEval"]["LengthDistribution"][1] = convert(LengthDistributionPdf2, reportReadsContentEvalDir, pageIndex=0)
            reportDict[sample]["basicStatistics"]["asPattern"]["asAnno"][1] = convert(asAnnoPdf, asPatternDir, pageIndex=0)
            reportDict[sample]["basicStatistics"]["asPattern"]["asSpliceSite"][1] = convert(asSpliceSitePdf, asPatternDir, pageIndex=0)
            reportDict[sample]["basicStatistics"]["isoformRank"][0] = convert(isoformRankPdf, isoformRankDir, pageIndex=0)

        for gene in reportDict[sample]:
            targetGeneDir = os.path.join(geneDir, gene)
            resolveDir(targetGeneDir, chdir=False)
            if "isoformStruc" in reportDict[sample][gene]:
                isoformStrucPdf = reportDict[sample][gene]["isoformStruc"]
                reportDict[sample][gene]["isoformStruc"] = convert(isoformStrucPdf, targetGeneDir, pageIndex=0)
            if "allelicAS" in reportDict[sample][gene]:
                allelicASPdf = reportDict[sample][gene]["allelicAS"]
                reportDict[sample][gene]["isoformStruc"] = convert(allelicASPdf, targetGeneDir, pageIndex=0)
            if "paTailAS" in reportDict[sample][gene]:
                paTailASPdf = reportDict[sample][gene]["paTailAS"]
                reportDict[sample][gene]["isoformStruc"] = convert(paTailASPdf, targetGeneDir, pageIndex=0)

def generateHtml(reportDict, iflasOut):
    # manhattanDir = os.path.abspath(args.manhattan)
    # qqplotDir = os.path.abspath(args.qqplot)
    # boxplotDir = os.path.abspath(args.boxplot)

    # data = pd.read_csv(myCSV)
    # allQtlStatistics = AllQtlStatistics()
    # allQtlStatistics.getInit(data)
    # allQtlStatistics.totalSNPs = totalSNPs
    # allTraitStatistics = AllTraitStatistics()
    # allTraitStatistics.getInit(data)
    #
    # geneFuncDict = getGeneFunc(myFuncFile, "\t")

    resolveDir(iflasOut)
    convertPdf2jpg(reportDict, iflasOut)
    generateMainPage1(reportDict)
    generateStatisticsPage(reportDict)

    generateGenePage(reportDict)


if __name__ == '__main__':
    pass
    # inputCSV = args.modasOut
    # geneFunc = args.func
    # modasOut = args.outDir
    # totalSNPs = args.snpNumber
    # # inputCSV = "/home/xufeng/xufeng/Projects/MODAS/wk_merge.test.merged.csv"
    # inputCSV = "/home/xufeng/xufeng/Projects/MODAS/result_20210319/maize_kernel_metabolite_merge.local_gwas_qtl_res.processed.csv"
    # # inputCSV = "/home/xufeng/xufeng/Projects/MODAS/result_20210319/test.csv"
    # # inputCSV = "/home/xufeng/xufeng/Projects/MODAS/test2.csv"
    # geneFunc = "/home/xufeng/xufeng/Projects/MODAS/maize_genefunc.txt"

    # generateHtml(inputCSV, geneFunc, modasOut, totalSNPs, args)
