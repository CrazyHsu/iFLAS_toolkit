#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
File name: scanESbyNGS.py
Author: CrazyHsu @ crazyhsu9527@gmail.com 
Created on: 2020-01-03 15:09:43
Last modified: 2020-01-03 15:09:45
'''

import argparse
from commonObjs import GenePredExtLine
from scanESbyNGSFuncs import *

def scanEsByNGS(fref, has_bin, fjunc, fpb, outFile):
    # load gene structures
    refDct = {}
    with open(fref) as f:
        for line in f:
            if line.startswith("#"):
                continue
            ref = GenePredExtLine(line, bincolumn=has_bin)
            if ref.chrom in refDct:
                refDct[ref.chrom].append(ref)
            else:
                refDct[ref.chrom] = [ref]

    for chrom in refDct:
        refDct[chrom].sort(key=lambda r: r.txStart)

    # load pacbio reads
    pbDct = {}
    with open(fpb) as f:
        for line in f:
            if line.startswith("#"):
                continue
            read = Bed12(line)
            if read.chrom in pbDct:
                pbDct[read.chrom].append(read)
            else:
                pbDct[read.chrom] = [read]

    for chrom in pbDct:
        pbDct[chrom].sort(key=lambda r: r.chromStart)

    # load junctions into {chrom:{donor:[acceptors], ...}, ...}
    dn2ac = {}
    jpos2count = {}
    dnpos2count = {}      # {dnpos:[(ac,count), (ac,count), ...], ...}
    with open(fjunc) as f:
        for line in f:
            if line.startswith("#"):
                continue
            junc = Junction(line)

            jpos2count[junc.jPos] = junc.score
            if junc.dnPos in dnpos2count:
                dnpos2count[junc.dnPos].append((junc.ac, junc.score))
            else:
                dnpos2count[junc.dnPos] = [(junc.ac, junc.score)]

            if junc.strand == "+":
                dn = junc.donor
                ac = junc.acceptor
            else:
                dn = junc.acceptor
                ac = junc.donor

            if junc.chrom in dn2ac:
                if dn in dn2ac[junc.chrom]:
                    dn2ac[junc.chrom][dn].append(ac)
                else:
                    dn2ac[junc.chrom][dn] = [ac]
            else:
                dn2ac[junc.chrom] = {}
                dn2ac[junc.chrom][dn] = [ac]

    # check dn with multiple acs
    seLst_p = []
    seLst_n = []
    for chrom in dn2ac:
        for dn in dn2ac[chrom]:
            acs = list(set(dn2ac[chrom][dn]))
            if len(acs) > 1:
                pos_acs = [ac for ac in acs if ac > dn]
                neg_acs = [ac for ac in acs if ac < dn]
                if len(pos_acs) > 1:
                    seLst_p.extend(check_ses(chrom, dn, pos_acs, refDct, pbDct, jpos2count, dnpos2count))
                if len(neg_acs) > 1:
                    seLst_n.extend(check_ses(chrom, dn, neg_acs, refDct, pbDct, jpos2count, dnpos2count))
    out = open(outFile, "w")
    for i in seLst_p:
        print >>out, i
    for i in seLst_n:
        print >>out, i
    out.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(usage=__doc__)
    parser.add_argument("-ref", type=str,
                        help="Reference gene structure in GPE format")
    parser.add_argument("-b", action='store_true',
                        help="Specified if GPE has bin column")
    parser.add_argument("-junc", type=str,
                        help="junctions.bed generated by Tophat")
    parser.add_argument("-pb", type=str,
                        help="PacBio reads processed, in Bed12 format")
    parser.add_argument("-o", type=str,
                        help="Output file")
    args = parser.parse_args()
    scanEsByNGS(fref=args.ref, has_bin=args.b, fjunc=args.junc, fpb=args.pb, outFile=args.o)
